# -*- coding: utf-8 -*-
"""PRUEBA PROYECTO VI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19l9dhkJc_ej9YKArPwgbSMM8GHAl9P_W
"""





file_name = "PROYECTO V. SERVICIOS DE SALUD..xlsx"

####PAQUETES####

import dash
from dash import dcc, html
import plotly.express as px
import pandas as pd
import numpy as np
from dash.dependencies import Input, Output
import plotly.graph_objects as go

df = pd.read_excel('PROYECTO V. SERVICIOS DE SALUD..xlsx', sheet_name=None)                                                                          
file_path = 'PROYECTO V. SERVICIOS DE SALUD..xlsx'
xls = pd.ExcelFile('PROYECTO V. SERVICIOS DE SALUD..xlsx')



df =pd.read_excel(file_name,sheet_name='CARENCIAS SALUD ')
df_enfermedades = pd.read_excel(file_name, sheet_name='ENFERMEDADES ')
df_sexo =pd.read_excel(file_name,sheet_name='ENFERME. MUJERES Y HOMBRES.')
df_fuentes = pd.read_excel(file_name, sheet_name='FUENTES DE FINANCIAMIENTO')
df_mapa = pd.read_excel(file_name, sheet_name='GEOLOCALIZACIÓN')


                                                                          ####DATOS####

# Datos de ejemplo para 36 municipios
data = {
    'Municipio': ['Amacuzac', 'Atlatlahucan', 'Axochiapan', 'Ayala', 'Coatlán del Río', 'Cuautla', 'Cuernavaca', 'Emiliano Zapata', 'Huitzilac', 'Jantetelco', 'Jiutepec','Jojutla', 'Jonacatepec', 'Mazatepec',
                  'Miacatlán', 'Ocuituco', 'Puente de Ixtla', 'Temixco', 'Tepalcingo', 'Tepoztlán', 'Tetecala', 'Tetela del Volcán', 'Tlalnepantla', 'Tlaltizapán',
                  'Tlaquiltenango', 'Tlayacapan', 'Totolapan', 'Xochitepec', 'Yautepec', 'Yecapixtla', 'Zacatepec', 'Zacualpan', 'Temoac', 'Coatetelco', 'Xoxocotla', 'Hueyapan'],
    'Personas\n2010': [5579, 7208, 9164, 14981, 1541, 63346, 104611, 24938, 6522, 5854, 61578, 12999, 4701, 1345, 4673, 4296, 22106, 39722, 6325, 16268, 1349, 7050,
                       3207, 11565, 8357, 7563, 4039, 20736, 30446, 14307, 8570, 3008, 3447, None, None, None],
    'Personas\n2015': [1905, 5122, 6420, 13181, 710, 39828, 66938, 15247, 3676, 1941, 34580, 8392, 1647, 904, 3381, 2226, 10221, 18538, 3636, 10266, 452, 3222, 1002,
                       7459, 4501, 2463, 1992, 11418, 13418, 9375, 5128, 1303, 1983, None, None, None],
    'Personas\n2020': [2798, 12119, 14446, 24442, 1650, 67628, 124169, 38806, 11916, 4131, 67784, 16453, 3211, 1794, 3561, 6604, 10928, 51258, 7822, 27198, 1074, 4126,
                       2231, 11769, 7209, 7531, 4870, 20839, 40044, 18350, 9631, 2152, 3480, 3155, 9044, 2789]
}

# Crear el DataFrame
df = pd.DataFrame(data)

# Datos de las enfermedades y sus totales con sus subcategorías
data = {
    'Enfermedad': [
        'Infecciones respiratorias agudas', 'Infecciones intestinales por otros organismos',
        'Infección de vías urinarias', 'Intoxicación por picadura de alacrán', 'Dengue no grave',
        'Úlceras, gastritis y duodenitis', 'Gingivitis y enfermedad periodontal', 'Obesidad',
        'Conjuntivitis', 'Diabetes mellitus tipo 2', 'Vulvovaginitis', 'Hipertensión arterial',
        'Otitis media aguda', 'COVID-19', 'Faringitis y amigdalitis estreptocócicas',
        'Hiperplasia de la próstata', 'Depresión', 'Accidentes de transporte en vehículos con motor',
        'Dengue con signos de alarma', 'Insuficiencia venosa periférica'
    ],
    'Servicios de Salud': [
        120470, 25216, 32754, 23887, 12732, 7278, 8750, 1783, 3593, 1792, 8009, 1693, 4245, 1495, 3033, 302, 1144, 647, 1800, 366
    ],
    'IMSS Ord': [
        88314, 17880, 21188, 1863, 8234, 3870, 4174, 9403, 5535, 1852, 947, 2213, 31, 5092, 149, 1176, 512, 16, 1268, 1241
    ],
    'ISSSTE': [
        23178, 8508, 8499, 461, 328, 2915, 622, 1990, 1179, 7873, 464, 5771, 1002, 457, 3306, 1753, 1408, 1, 67, 814
    ],
    'IMSS Bienest.': [
        0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0
    ],
    'PEMEX': [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0
    ],
    'SEDENA': [
        1572, 744, 529, 31, 0, 141, 5, 82, 138, 226, 167, 186, 70, 0, 13, 35, 27, 20, 11, 88
    ],
    'SEMAR': [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0
    ],
    'OTRAS': [
        46326, 18047, 6439, 23, 263, 2377, 1400, 1262, 1831, 445, 1025, 646, 2505, 0, 354, 177, 174, 2504, 19, 412
    ]
}

# Crear el DataFrame
df_enfermedades = pd.DataFrame(data)

df_long = pd.melt(df_enfermedades, id_vars=['Enfermedad'],
                  value_vars=['Servicios de Salud', 'IMSS Ord', 'ISSSTE', 'IMSS Bienest.',
                              'PEMEX', 'SEDENA', 'SEMAR', 'OTRAS'],
                  var_name='Tipo de Servicio', value_name='Total Casos')


df_sexo.columns = df_sexo.columns.str.strip()

# Convertir la columna 'TOTAL' a numérico (ya no debería tener problemas con espacios o comas)
df_sexo['TOTAL'] = pd.to_numeric(df_sexo['TOTAL'], errors='coerce')

# Eliminar filas con NaN en 'TOTAL', por si hay alguna conversión fallida
df_sexo = df_sexo.dropna(subset=['TOTAL'])

# Filtrar los datos para Mujeres y Hombres (Asegurarse de que los valores de 'SEXO' sean correctos)
df_mujeres = df_sexo[df_sexo['SEXO'] == 'MUJERES']
df_hombres = df_sexo[df_sexo['SEXO'] == 'HOMBRES']

# Colores personalizados para las barras
color_mujeres = ['#FF6347', '#FF4500', '#FF8C00', '#FFD700', '#ADFF2F', '#32CD32']  # Algunos tonos cálidos para las mujeres
color_hombres = ['#4682B4', '#5F9EA0', '#6495ED', '#1E90FF', '#00BFFF', '#87CEEB']  # Tonos fríos para los hombres

df_fuentes = pd.read_excel(file_name, sheet_name='FUENTES DE FINANCIAMIENTO')
# Eliminar espacios extra en los nombres de las columnas
df_fuentes.columns = df_fuentes.columns.str.strip()

# Filtrar los datos para 'Gasto Corriente' y 'Gasto de Inversión'
df_gasto_corriente = df_fuentes[df_fuentes['DESC_TIPO_GASTO'] == 'Gasto corriente']
df_gasto_inversion = df_fuentes[df_fuentes['DESC_TIPO_GASTO'] == 'Gasto de Inversión']




poblacion_columns = [
    'Población sin afiliación a servicios de salud',
    'Población afiliada a servicios de salud',
    'Población afiliada a servicios de salud en el IMSS',
    'Población afiliada a servicios de salud en el ISSSTE',
    'Población afiliada a servicios de salud en el ISSSTE estatal',
    'Población afiliada a servicios de salud en PEMEX, Defensa o Marina',
    'Población afiliada a servicios de salud en el Instituto de Salud para el Bienestar',
    'Población afiliada a servicios de salud en el IMSS BIENESTAR',
    'Población afiliada a servicios de salud en una institución privada',
    'Población afiliada a servicios de salud en otra institución'
]

# Reemplazar '*' con 'O'
df_mapa[poblacion_columns] = df_mapa[poblacion_columns].replace('*', 'O')

# Convertir las columnas a tipo numérico, tratando los valores 'O' como texto
df_mapa[poblacion_columns] = df_mapa[poblacion_columns].apply(pd.to_numeric, errors='coerce')

# Agrupar los datos por municipio y localidad
df_agrupado = df_mapa.groupby(['Nombre del municipio o demarcación territorial', 'Nombre de la localidad', 'Latitud', 'Longitud'], as_index=False).agg(
    {'Población sin afiliación a servicios de salud': 'sum',
     'Población afiliada a servicios de salud': 'sum',
     'Población afiliada a servicios de salud en el IMSS': 'sum',
     'Población afiliada a servicios de salud en el ISSSTE': 'sum',
     'Población afiliada a servicios de salud en el ISSSTE estatal': 'sum',
     'Población afiliada a servicios de salud en PEMEX, Defensa o Marina': 'sum',
     'Población afiliada a servicios de salud en el Instituto de Salud para el Bienestar': 'sum',
     'Población afiliada a servicios de salud en el IMSS BIENESTAR': 'sum',
     'Población afiliada a servicios de salud en una institución privada': 'sum',
     'Población afiliada a servicios de salud en otra institución': 'sum'
    })


                                                                           ####GRÁFICOS####

# Crear la aplicación Dash
app = dash.Dash(__name__)
server = app.server

# Crear el gráfico de barras apiladas
fig_bar = px.bar(df, x='Municipio', y=['Personas\n2010', 'Personas\n2015', 'Personas\n2020'],
                 labels={'Municipio': 'Municipio', 'value': 'Número de Personas'},
                 title="Número de Personas por Municipio (2010, 2015, 2020)",
                 category_orders={'Municipio': df['Municipio'].tolist()})

# Crear el gráfico de líneas con estilo mejorado
fig_line = px.line(df, x='Municipio', y=['Personas\n2010', 'Personas\n2015', 'Personas\n2020'],
                   labels={'Municipio': 'Municipio', 'value': 'Número de Personas'},
                   title="Evolución del Número de Personas por Municipio")

# Estilizar la línea con color blanco y agregar puntos
fig_line.update_traces(
    line=dict(color='white', width=3, dash='solid'),  # Línea blanca, más gruesa y sólida
    mode='lines+markers',  # Añadir puntos en la línea
    marker=dict(color='white', size=6, symbol='circle')  # Puntos blancos con forma circular
)

# Ajuste de colores y tema para los gráficos
fig_bar.update_layout(
    plot_bgcolor='rgb(13, 17, 23)',  # Fondo del gráfico
    paper_bgcolor='rgb(13, 17, 23)',  # Fondo del lienzo
    font=dict(color='white'),  # Color de la fuente
    title_font=dict(size=24, color='white', family='Arial, sans-serif'),
    xaxis_title_font=dict(color='white'),
    yaxis_title_font=dict(color='white'),
    xaxis=dict(showgrid=False, tickangle=45, tickfont=dict(color='white')),
    yaxis=dict(showgrid=True, tickfont=dict(color='white')),
    legend=dict(font=dict(color='white'))
)

fig_line.update_layout(
    plot_bgcolor='rgb(13, 17, 23)',  # Fondo del gráfico
    paper_bgcolor='rgb(13, 17, 23)',  # Fondo del lienzo
    font=dict(color='white'),  # Color de la fuente
    title_font=dict(size=24, color='white', family='Arial, sans-serif'),
    xaxis_title_font=dict(color='white'),
    yaxis_title_font=dict(color='white'),
    xaxis=dict(showgrid=True, tickfont=dict(color='white')),
    yaxis=dict(showgrid=True, tickfont=dict(color='white')),
)

# Crear el gráfico de barras apiladas para distribución de enfermedades
fig_bar_stacked = px.bar(df_long, y='Enfermedad', x='Total Casos', color='Tipo de Servicio',
                         labels={'Enfermedad': 'Enfermedad', 'Total Casos': 'Total de Casos'},
                         title="Distribución de Enfermedades por Tipo de Servicio en Morelos",
                         orientation='h')  # Cambiar la orientación a horizontal

# Configuración del gráfico para hacerlo más legible
fig_bar_stacked.update_layout(
    xaxis_title='Total de Casos',  # Título para el eje X
    yaxis_title='Enfermedades',  # Título para el eje Y
    plot_bgcolor="#0D1123",  # Fondo azul marino para el área de graficado
    paper_bgcolor="#0D1123",  # Fondo de la página azul marino
    font=dict(color="white"),  # Texto en color blanco
    margin=dict(l=50, r=50, t=50, b=100),  # Margen ajustado para la visualización
)

# Gráfico para Mujeres
fig_mujeres = px.bar(df_mujeres,
                     x='TOTAL',  # El eje X es el Total
                     y='ENFERMEDAD',  # El eje Y es la Enfermedad
                     labels={'ENFERMEDAD': 'Enfermedad', 'TOTAL': 'Total de Casos'},
                     title="Total de Casos por Enfermedad - Mujeres",
                     color='ENFERMEDAD',
                     color_discrete_sequence=color_mujeres,  # Colores personalizados para las barras de mujeres
                     orientation='h')  # Mantener las barras horizontales

# Gráfico para Hombres
fig_hombres = px.bar(df_hombres,
                     x='TOTAL',  # El eje X es el Total
                     y='ENFERMEDAD',  # El eje Y es la Enfermedad
                     labels={'ENFERMEDAD': 'Enfermedad', 'TOTAL': 'Total de Casos'},
                     title="Total de Casos por Enfermedad - Hombres",
                     color='ENFERMEDAD',
                     color_discrete_sequence=color_hombres,  # Colores personalizados para las barras de hombres
                     orientation='h')  # Mantener las barras horizontales

# Estilizar los gráficos (para ambos gráficos)
fig_mujeres.update_layout(
    plot_bgcolor="#003366",
    paper_bgcolor="#003366",
    font=dict(color="white"),
    xaxis_title='Total de Casos',
    yaxis_title='Enfermedades',
    margin=dict(l=50, r=50, t=50, b=100),
    showlegend=False,  # Quitar leyenda
    xaxis=dict(tickangle=90),  # Rotar etiquetas del eje X a 90 grados (vertical)
    yaxis=dict(showticklabels=False),  # Quitar etiquetas del eje Y
    yaxis_side="right"  # Colocar el eje Y del gráfico de mujeres a la derecha
)

fig_hombres.update_layout(
    plot_bgcolor="#003366",
    paper_bgcolor="#003366",
    font=dict(color="white"),
    xaxis_title='Total de Casos',
    yaxis_title='Enfermedades',
    margin=dict(l=50, r=50, t=50, b=100),
    showlegend=False,  # Quitar leyenda
    xaxis=dict(tickangle=90),  # Rotar etiquetas del eje X a 90 grados (vertical)
    yaxis=dict(showticklabels=False)  # Quitar etiquetas del eje Y
)

# Crear el primer Treemap (Gasto Corriente)
fig_treemap_corriente = px.treemap(df_gasto_corriente,
                                   path=['DESC_TIPO_GASTO', 'DESC_PARTIDA_GENERICA'],  # Jerarquía de categorías
                                   values='MONTO_COMPROMETIDO',  # Usamos 'MONTO_COMPROMETIDO' como el valor
                                   title='TOTAL DE GASTO CORRIENTE DESTINADO A LOS SERVICIOS DE SALUD EN MORELOS')

# Estilización del Treemap (Gasto Corriente)
fig_treemap_corriente.update_traces(
    marker=dict(colors=['#00A3E0'] * len(df_gasto_corriente)),  # Azul más vivo para Gasto Corriente
    customdata=df_gasto_corriente[['MONTO_PAGADO']],  # Se agrega 'MONTO_PAGADO' como customdata
    hovertemplate=(
        "<b>%{label}</b><br>"
        "Monto Comprometido: %{value}<br>"
        "Monto Pagado: %{customdata[0]}"  # Solo mostrar Monto Pagado
    )
)

fig_treemap_corriente.update_layout(
    plot_bgcolor='#0D1123',  # Fondo del gráfico
    paper_bgcolor='#0D1123',  # Fondo del papel
    font=dict(color='white'),  # Color de la fuente
    title_font=dict(size=16, color='white', family='Arial, sans-serif')
)

# Crear el segundo Treemap (Gasto de Inversión)
fig_treemap_inversion = px.treemap(df_gasto_inversion,
                                   path=['DESC_TIPO_GASTO', 'DESC_PARTIDA_GENERICA'],  # Jerarquía de categorías
                                   values='MONTO_COMPROMETIDO',  # Usamos 'MONTO_COMPROMETIDO' como el valor
                                   title='GASTO DE INVERSIÓN DESTINADO A LOS SERVICIOS DE SALUD DE MORELOS')

# Estilización del Treemap (Gasto de Inversión)
fig_treemap_inversion.update_traces(
    marker=dict(colors=['#1f77b4'] * len(df_gasto_inversion)),  # Azul estándar para Gasto de Inversión
    customdata=df_gasto_inversion[['MONTO_PAGADO']],  # Se agrega 'MONTO_PAGADO' como customdata
    hovertemplate=(
        "<b>%{label}</b><br>"
        "Monto Comprometido: %{value}<br>"
        "Monto Pagado: %{customdata[0]}"  # Solo mostrar Monto Pagado
    )
)

fig_treemap_inversion.update_layout(
    plot_bgcolor='#0D1123',  # Fondo del gráfico
    paper_bgcolor='#0D1123',  # Fondo del papel
    font=dict(color='white'),  # Color de la fuente
    title_font=dict(size=16, color='white', family='Arial, sans-serif')
)

                                                                           ####LAYOUT###

  # Layout de la aplicación con tres gráficos
app.layout = html.Div(
    style={'backgroundColor': '#0D1123', 'padding': '20px'},  # Fondo azul marino y padding
    children=[

        # Título de la plataforma
        html.H1(
            "SERVICIOS DE SALUD EN EL ESTADO DE MORELOS",
            style={
                'textAlign': 'center',
                'color': 'white',
                'fontSize': '36px',
                'fontWeight': 'bold',
                'background': 'linear-gradient(135deg, #003366, #00579c)',  # Degradado azul
                'padding': '20px',  # Padding para separar el texto del borde
                'borderRadius': '15px',  # Bordes redondeados para un acabado suave
                'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.2)',  # Sombra para profundidad
                'maxWidth': '90%',  # Limitar el tamaño del título
                'margin': '0 auto'  # Centrado
            }
        ),


        # Carga de la fuente Montserrat
        html.Link(
            href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&display=swap",
            rel="stylesheet"
        ),

        # Leyenda del proyecto con fuente Montserrat, tamaño mayor y saltos de línea para separación
        html.P(
            """El presente proyecto tiene por objeto a través de un panel de control interactivo, presentar los resultados
            y el panorama general del sistema de salud en Morelos, su relación con pobreza urbana y rural así como la distribución de los servicios
            de salud.""",
            style={
                'textAlign': 'center',
                'color': '#f1f1f1',
                'fontSize': '24px',  # Aumentamos el tamaño de la fuente
                'marginTop': '20px',
                'maxWidth': '80%',
                'margin': '0 auto',
                'fontFamily': 'Montserrat',  # Aplicamos la fuente Montserrat
                'lineHeight': '1.6'  # Aumentamos el interlineado para mejor legibilidad
            }
        ),
        html.Br(),  # Salto de línea entre los dos párrafos
        html.P(
            """Esta herramienta, además de promover la transparencia presupuestaria, se encarga de fortalecer la planeación
            de la política pública en materia de salud en beneficio de las y los morelenses.""",
            style={
                'textAlign': 'center',
                'color': '#f1f1f1',
                'fontSize': '24px',  # Aumentamos el tamaño de la fuente
                'marginTop': '20px',
                'maxWidth': '80%',
                'margin': '0 auto',
                'fontFamily': 'Montserrat',  # Aplicamos la fuente Montserrat
                'lineHeight': '1.6'  # Aumentamos el interlineado para mejor legibilidad
            }
        ),


html.Div(
    children=[
        html.H3(
            "NÚMERO DE PERSONAS CON CARENCIA DE ACCESO A LOS SERVICIOS DE SALUD 2020 (CONEVAL-INEGI)",
            style={
                'textAlign': 'center',
                'color': 'white',  # Texto blanco
                'fontSize': '24px',  # Tamaño de la fuente más grande
                'fontWeight': 'bold',  # Fuente en negrita
                'fontFamily': 'Montserrat',  # Aplicamos la fuente Montserrat
                'marginTop': '30px',  # Espacio superior
                'marginBottom': '10px'  # Espacio inferior
            }
        ),
    ],
    style={
        'backgroundColor': '#003366',  # Fondo azul
        'padding': '20px',  # Padding para que el texto no toque el borde
        'borderRadius': '10px',  # Bordes redondeados
        'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'  # Sombra para profundidad
    }
),

        # Gráfico de barras apiladas (inicialmente visible)
html.Div([dcc.Graph(id='bar-chart', figure=fig_bar)],
         style={'textAlign': 'center', 'marginTop': '20px', 'border': '3px solid #003366', 'borderRadius': '10px', 'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),


        html.Div(
            children=[
               html.H3(
            "MAPA DE GEOREFERENCIA DE LA CARENCIA DE ACCESO A LOS SERVICIOS DE SALUD",
            style={
                'textAlign': 'center',
                'color': 'white',  # Texto blanco
                'fontSize': '24px',  # Tamaño de la fuente más grande
                'fontWeight': 'bold',  # Fuente en negrita
                'fontFamily': 'Montserrat',  # Aplicamos la fuente Montserrat
                'marginTop': '30px',  # Espacio superior
                'marginBottom': '10px'  # Espacio inferior
            }
        ),

        html.H4(
            "Consulta a través de los siguientes menús, por municipio, localidad y servicio institucional",
            style={
                'textAlign': 'center',
                'color': 'white',  # Texto blanco
                'fontSize': '20px',  # Tamaño de la fuente
                'fontFamily': 'Montserrat',  # Aplicamos la fuente Montserrat
                'marginTop': '10px',  # Espacio superior
                'marginBottom': '30px'  # Espacio inferior
            }
        ),
    ],

    style={
        'backgroundColor': '#003366',  # Fondo azul
        'padding': '20px',  # Padding para que el texto no toque el borde
        'borderRadius': '10px',  # Bordes redondeados
        'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'  # Sombra para profundidad
    }
),

        # Filtros para seleccionar el municipio y la localidad
        html.Div([
            # Contenedor para los dropdowns en línea (horizontal)
            html.Div([  # Primer dropdown: Municipio
                dcc.Dropdown(
                    id='municipio-dropdown',
                    options=[{'label': 'Todos', 'value': 'Todos'}] + [{'label': municipio, 'value': municipio} for municipio in df_agrupado['Nombre del municipio o demarcación territorial'].unique()],
                    value='Todos',  # Valor inicial para 'Todos'
                    multi=False,
                    placeholder="Selecciona un municipio",
                    style={
                        'width': '100%',
                        'backgroundColor': 'white',  # Fondo blanco
                        'color': '#003366',  # Texto azul
                        'border': '2px solid #003366',  # Borde azul
                        'borderRadius': '5px',  # Bordes redondeados
                        'padding': '10px',
                        'fontSize': '16px'
                    }
                )
            ], style={'width': '30%', 'marginRight': '10px'}),  # Ancho de 30% para alinear a la izquierda

            html.Div([  # Segundo dropdown: Localidad
                dcc.Dropdown(
                    id='localidad-dropdown',
                    options=[],  # Este se actualizará dinámicamente según el municipio
                    value=None,
                    multi=False,
                    placeholder="Selecciona una localidad",
                    style={
                        'width': '100%',
                        'backgroundColor': 'white',  # Fondo blanco
                        'color': '#003366',  # Texto azul
                        'border': '2px solid #003366',  # Borde azul
                        'borderRadius': '5px',  # Bordes redondeados
                        'padding': '10px',
                        'fontSize': '16px'
                    }
                )
            ], style={'width': '30%', 'marginRight': '10px'}),  # Ancho de 30% para alinear a la izquierda

            html.Div([  # Tercer dropdown: Tipo de población
                dcc.Dropdown(
                    id='poblacion-dropdown',
                    options=[
                        {'label': 'Población sin afiliación a servicios de salud', 'value': 'Población sin afiliación a servicios de salud'},
                        {'label': 'Población afiliada a servicios de salud', 'value': 'Población afiliada a servicios de salud'},
                        {'label': 'Población afiliada a servicios de salud en el IMSS', 'value': 'Población afiliada a servicios de salud en el IMSS'},
                        {'label': 'Población afiliada a servicios de salud en el ISSSTE', 'value': 'Población afiliada a servicios de salud en el ISSSTE'},
                        {'label': 'Población afiliada a servicios de salud en el ISSSTE estatal', 'value': 'Población afiliada a servicios de salud en el ISSSTE estatal'},
                        {'label': 'Población afiliada a servicios de salud en PEMEX, Defensa o Marina', 'value': 'Población afiliada a servicios de salud en PEMEX, Defensa o Marina'},
                        {'label': 'Población afiliada a servicios de salud en el Instituto de Salud para el Bienestar', 'value': 'Población afiliada a servicios de salud en el Instituto de Salud para el Bienestar'},
                        {'label': 'Población afiliada a servicios de salud en el IMSS BIENESTAR', 'value': 'Población afiliada a servicios de salud en el IMSS BIENESTAR'},
                        {'label': 'Población afiliada a servicios de salud en una institución privada', 'value': 'Población afiliada a servicios de salud en una institución privada'},
                        {'label': 'Población afiliada a servicios de salud en otra institución', 'value': 'Población afiliada a servicios de salud en otra institución'}
                    ],
                    value='Población sin afiliación a servicios de salud',  # Valor inicial
                    multi=False,
                    placeholder="Selecciona el tipo de población",
                    style={
                        'width': '100%',
                        'backgroundColor': 'white',  # Fondo blanco
                        'color': '#003366',  # Texto azul
                        'border': '2px solid #003366',  # Borde azul
                        'borderRadius': '5px',  # Bordes redondeados
                        'padding': '10px',
                        'fontSize': '16px'
                    }
                )
            ], style={'width': '30%'}),  # Ancho de 30% para alinear a la derecha

        ], style={'display': 'flex', 'justifyContent': 'space-between', 'marginTop': '20px'}),  # Alinea horizontalmente los dropdowns

        # Mapa de Plotly con borde azul oscuro (movido debajo del segundo gráfico)
        html.Div(
            [
                dcc.Graph(
                    id='mapa',
                    style={
                        'border': '3px solid #003366',  # Borde azul oscuro
                        'borderRadius': '10px',  # Bordes redondeados
                        'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)',  # Sombra sutil para elegancia
                        'height': '800px',  # Tamaño vertical del mapa
                        'width': '100%'  # Asegura que el mapa ocupe todo el ancho disponible
                    }
                )
            ],
            style={'padding': '20px', 'backgroundColor': '#f1f1f1'}  # Fondo gris claro para el contenedor del mapa
        ),

        html.Div(
    children=[
        html.H3(
            "¿DE QUÉ SE ENFERMA LA POBLACIÓN MORELENSE?",
            style={
                'textAlign': 'center',
                'color': 'white',
                'fontSize': '24px',
                'fontWeight': 'bold',
                'fontFamily': 'Montserrat',  # Fuente Montserrat
                'marginTop': '30px',  # Espacio superior
                'marginBottom': '10px'  # Espacio inferior
            }
        ),
        html.H4(
            "PRINCIPALES PADECIMIENTOS Y ENFERMEDADES ATENDIDOS EN SERVICIOS INSTITUCIONALES.",
            style={
                'textAlign': 'center',
                'color': 'white',
                'fontSize': '20px',  # Tamaño ligeramente más pequeño que el título
                'fontWeight': 'normal',  # Fuente no tan gruesa
                'fontFamily': 'Montserrat',  # Fuente Montserrat
                'marginTop': '10px',  # Espacio superior
                'marginBottom': '30px'  # Espacio inferior
            }
        ),
    ],
    style={
        'backgroundColor': '#003366',  # Fondo azul
        'padding': '20px',  # Padding para que el texto no toque el borde
        'borderRadius': '10px',  # Bordes redondeados
        'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'  # Sombra para profundidad
    }
),

        # Gráfico de barras apiladas de enfermedades
        html.Div([dcc.Graph(id='bar-chart-stacked', figure=fig_bar_stacked)],
                 style={'textAlign': 'center', 'marginTop': '20px', 'border': '3px solid #003366', 'borderRadius': '10px', 'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),

        # Gráfico de comparación entre hombres y mujeres (dos gráficos)
        html.Div([
            dcc.Graph(id='bar-chart-mujeres', figure=fig_mujeres)
        ], style={'display': 'inline-block', 'width': '48%', 'marginTop': '20px', 'border': '3px solid #003366', 'borderRadius': '10px', 'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),

        html.Div([
            dcc.Graph(id='bar-chart-hombres', figure=fig_hombres)
        ], style={'display': 'inline-block', 'width': '48%', 'marginTop': '20px', 'border': '3px solid #003366', 'borderRadius': '10px', 'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),

        html.Div(
    children=[
        html.H3(
            "¿CUÁNTO GASTA EL GOBIERNO EN SALUD?",
            style={
                'textAlign': 'center',
                'color': 'white',  # Texto blanco
                'fontSize': '24px',  # Tamaño de la fuente más grande
                'fontWeight': 'bold',  # Fuente en negrita
                'fontFamily': 'Montserrat',  # Aplicamos la fuente Montserrat
                'marginTop': '30px',  # Espacio superior
                'marginBottom': '10px'  # Espacio inferior
            }
        ),
        html.H3(
            "CONOCE EL PRESUPUESTO DESTINADO EN GASTO CORRIENTE Y DE INVERSIÓN DEL FONDO DE APORTACIONES PARA LOS SERVICIOS DE SALUD (2023)",
            style={
                'textAlign': 'center',
                'color': 'white',  # Texto blanco
                'fontSize': '20px',  # Tamaño de la fuente un poco más pequeño
                'fontFamily': 'Montserrat',  # Aplicamos la fuente Montserrat
                'marginTop': '10px',  # Espacio superior
                'marginBottom': '30px'  # Espacio inferior
            }
        ),
    ],
    style={
        'backgroundColor': '#003366',  # Fondo azul
        'padding': '20px',  # Padding para que el texto no toque el borde
        'borderRadius': '10px',  # Bordes redondeados
        'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'  # Sombra para profundidad
    }
),


        # Gráficos en formato Treemap
        html.Div([
            html.Div([dcc.Graph(id='treemap-corriente', figure=fig_treemap_corriente)],
                     style={'width': '48%', 'minWidth': '600px', 'marginRight': '4%', 'border': '3px solid #003366', 'borderRadius': '10px', 'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),
            html.Div([dcc.Graph(id='treemap-inversion', figure=fig_treemap_inversion)],
                     style={'width': '48%', 'minWidth': '600px', 'border': '3px solid #003366', 'borderRadius': '10px', 'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'})
        ], style={'display': 'flex', 'justifyContent': 'space-between', 'marginTop': '40px'}),

        # Agregamos una sección con las fuentes de datos interactivas.
html.Div([
    html.H3("Fuentes de Datos y Recursos", style={'textAlign': 'center', 'color': 'white', 'fontSize': '28px'}),

    html.P(
        "Consulta en los sitios web oficiales",
        style={'textAlign': 'center', 'color': '#f1f1f1', 'fontSize': '16px', 'marginTop': '10px'}
    ),

    # Enlaces interactivos para las fuentes de datos
    html.Div([
        # Medición de Pobreza Municipal 2020
        html.A(
            "I. Medición de Pobreza Municipal 2020 - Carecencia por acceso a los servicios de salud",
            href="https://municipal-coneval.hub.arcgis.com/",
            target="_blank",
            style={
                'color': '#FFFFFF',
                'fontSize': '18px',
                'margin': '10px',
                'display': 'inline-block',
                'textDecoration': 'underline',
                'cursor': 'pointer'
            }
        ),
        html.Br(),

        # Programas de cálculo y bases de datos
        html.A(
            "II. Programas de cálculo y bases de datos, Pobreza Municipal 2010-2020",
            href="https://www.coneval.org.mx/Medicion/Paginas/Programas_BD_municipal_2010_2020.aspx",
            target="_blank",
            style={
                'color': '#FFFFFF',
                'fontSize': '18px',
                'margin': '10px',
                'display': 'inline-block',
                'textDecoration': 'underline',
                'cursor': 'pointer'
            }
        ),
        html.Br(),

        # Diagnóstico Estatal de Salud 2022
        html.A(
            "III. Diagnóstico Estatal de Salud 2022 - Gobierno del Estado de Morelos",
            href="https://www.ssm.gob.mx/portal/diagnostico-estatal-en-salud/2022/DES_2022.pdf",
            target="_blank",
            style={
                'color': '#FFFFFF',
                'fontSize': '18px',
                'margin': '10px',
                'display': 'inline-block',
                'textDecoration': 'underline',
                'cursor': 'pointer'
            }
        ),
        html.Br(),

        # Anuario de Morbilidad 1948-2023
        html.A(
            "IV. Anuario de Morbilidad 1948-2023 - 20 Principales Causas de Enfermedad",
            href="https://epidemiologia.salud.gob.mx/anuario/html/principales_estatal_institucion.html",
            target="_blank",
            style={
                'color': '#FFFFFF',
                'fontSize': '18px',
                'margin': '10px',
                'display': 'inline-block',
                'textDecoration': 'underline',
                'cursor': 'pointer'
            }
        ),
        html.Br(),

        # Sistema de Consulta de Integración Territorial
        html.A(
            "V. Sistema de Consulta de Integración Territorial, Entorno Urbano y Localidad",
            href="https://www.inegi.org.mx/app/scitel/Default?ev=10",
            target="_blank",
            style={
                'color': '#FFFFFF',
                'fontSize': '18px',
                'margin': '10px',
                'display': 'inline-block',
                'textDecoration': 'underline',
                'cursor': 'pointer'
            }
        ),
        html.Br(),

        # Gasto Federalizado del Fondo de Aportaciones para los Servicios de Salud
        html.A(
            "VI. Gasto Federalizado del Fondo de Aportaciones para los Servicios de Salud",
            href="https://www.transparenciapresupuestaria.gob.mx/Datos-Abiertos",
            target="_blank",
            style={
                'color': '#FFFFFF',
                'fontSize': '18px',
                'margin': '10px',
                'display': 'inline-block',
                'textDecoration': 'underline',
                'cursor': 'pointer'
            }
        ),

    ], style={'textAlign': 'center', 'marginTop': '20px'}),

], style={'marginTop': '40px', 'backgroundColor': '#003366', 'padding': '20px', 'borderRadius': '10px'}),

                html.A(
                      " ELABORADO POR LIC.C.POL. EDUARDO CABRERA GUTIÉRREZ ",
            href="https://www.linkedin.com/in/eduardo-cabrera-guti%C3%A9rrez-00bb221b7/",
            target="_blank",
            style={
                'color': '#FFFFFF',
                'fontSize': '18px',
                'margin': '10px',
                'display': 'inline-block',
                'textDecoration': 'underline',
                'cursor': 'pointer'
            }
        ),
    ]
)


                                                                    ####CALLBACK####

@app.callback(
    Output('localidad-dropdown', 'options'),
    Output('localidad-dropdown', 'value'),
    Input('municipio-dropdown', 'value')
)
def update_localidades(municipio_seleccionado):
    if municipio_seleccionado == 'Todos':
        localidades = df_agrupado
    else:
        localidades = df_agrupado[df_agrupado['Nombre del municipio o demarcación territorial'] == municipio_seleccionado]

    localidades_options = [{'label': localidad, 'value': localidad} for localidad in localidades['Nombre de la localidad'].unique()]
    return localidades_options, localidades['Nombre de la localidad'].iloc[0] if len(localidades_options) > 0 else None

# Función para crear el mapa con Plotly
@app.callback(
    Output('mapa', 'figure'),
    Input('municipio-dropdown', 'value'),
    Input('localidad-dropdown', 'value'),
    Input('poblacion-dropdown', 'value')
)
def update_map(municipio_seleccionado, localidad_seleccionada, poblacion_seleccionada):
    try:
        if municipio_seleccionado == 'Todos':
            df_filtrado = df_agrupado
        elif localidad_seleccionada:
            df_filtrado = df_agrupado[
                (df_agrupado['Nombre del municipio o demarcación territorial'] == municipio_seleccionado) &
                (df_agrupado['Nombre de la localidad'] == localidad_seleccionada)
            ]
        else:
            df_filtrado = df_agrupado[df_agrupado['Nombre del municipio o demarcación territorial'] == municipio_seleccionado]

        colores = [
            '#1004fc', '#0c03df', '#0802c3', '#00008a', '#000058',
            '#1f109a', '#2f18bb', '#3e20dc', '#2f18bb', '#2911f1'
        ]

        fig = go.Figure(go.Scattermapbox(
            lat=df_filtrado['Latitud'],
            lon=df_filtrado['Longitud'],
            mode='markers',
            marker=go.scattermapbox.Marker(
                size=10,
                color=colores * (len(df_filtrado) // len(colores) + 1)
            ),
            text=df_filtrado['Nombre de la localidad'] + '<br>' + df_filtrado[poblacion_seleccionada].apply(lambda x: f"{int(x)} personas").astype(str),
            hoverinfo='text'
        ))

        fig.update_layout(
            mapbox_style="open-street-map",
            mapbox_zoom=9,
            mapbox_center={"lat": 18.7, "lon": -99.2},
            title="Población y Servicios de Salud"
        )

        return fig

    except Exception as e:
        print(f"Error en el callback de actualización del mapa: {e}")
        return go.Figure()  # Si hay un error, retornar un gráfico vacío


                                                                    ####EJECUCIÓN###

# Correr la aplicación
if __name__ == "__main__":
    app.run_server(host="0.0.0.0", port=10000, debug=True)
